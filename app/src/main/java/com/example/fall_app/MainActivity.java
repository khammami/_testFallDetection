package com.example.fall_app;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.example.fall_app.ml.FallDetectionModel;

import org.tensorflow.lite.DataType;
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private final static String TAG = MainActivity.class.getSimpleName();

    TextView tv;
    Button btn;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        tv= findViewById(R.id.textView1);
        btn = findViewById(R.id.button);

        btn.setOnClickListener(view -> classification());

    };

public  void classification (){

    try {
        FallDetectionModel model = FallDetectionModel.newInstance(this);

        // Creates inputs for reference.
        TensorBuffer inputFeature0 = TensorBuffer.createFixedSize(new int[]{1, 401, 3}, DataType.FLOAT32);

        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(401 * 3);
        byteBuffer.order(ByteOrder.nativeOrder());

        float[] values = {10,	-148,	-221,	14,	-150,	-218,	11,	-150,	-213,	6,	-146,	-211,	6,	-156,	-212,	5,	-156,	-215,	4,	-152,	-218,	5,	-152,	-217,	8,	-154,	-217,	7,	-149,	-222,	10,	-153,	-225,	10,	-149,	-228,	9,	-146,	-228,	7,	-144,	-231,	7,	-137,	-226,	13,	-138,	-225,	8,	-133,	-222,	16,	-139,	-225,	17,	-138,	-222,	20,	-138,	-227,	19,	-136,	-221,	18,	-136,	-220,	21,	-135,	-219,	24,	-138,	-220,	23,	-140,	-218,	22,	-141,	-218,	20,	-135,	-216,	18,	-133,	-217,	17,	-133,	-219,	19,	-132,	-224,	18,	-132,	-225,	15,	-132,	-226,	13,	-132,	-221,	8,	-134,	-224,	9,	-139,	-225,	8,	-138,	-228,	9,	-141,	-229,	9,	-135,	-230,	7,	-137,	-227,	14,	-140,	-229,	12,	-134,	-224,	17,	-138,	-217,	18,	-137,	-215,	14,	-135,	-208,	23,	-139,	-211,	12,	-134,	-205,	14,	-132,	-210,	16,	-133,	-211,	13,	-142,	-221,	13,	-132,	-218,	14,	-132,	-225,	14,	-132,	-223,	12,	-132,	-223,	14,	-132,	-218,	11,	-127,	-217,	14,	-129,	-219,	7,	-120,	-211,	15,	-122,	-220,	16,	-125,	-223,	18,	-126,	-219,	18,	-132,	-221,	26,	-133,	-219,	22,	-134,	-220,	20,	-134,	-224,	22,	-134,	-223,	21,	-134,	-228,	17,	-130,	-223,	17,	-132,	-229,	15,	-133,	-229,	12,	-135,	-230,	15,	-139,	-229,	19,	-136,	-226,	14,	-139,	-221,	14,	-148,	-222,	15,	-131,	-217,	22,	-126,	-225,	22,	-124,	-223,	22,	-130,	-220,	22,	-121,	-216,	26,	-125,	-221,	32,	-131,	-223,	27,	-137,	-222,	30,	-126,	-221,	36,	-134,	-227,	32,	-136,	-230,	36,	-137,	-237,	29,	-141,	-229,	33,	-136,	-236,	35,	-141,	-237,	32,	-145,	-232,	26,	-147,	-233,	26,	-152,	-229,	22,	-155,	-222,	16,	-155,	-224,	16,	-158,	-224,	18,	-160,	-232,	17,	-157,	-221,	22,	-157,	-226,	25,	-156,	-227,	26,	-152,	-228,	28,	-143,	-229,	26,	-143,	-230,	27,	-149,	-234,	26,	-146,	-230,	28,	-147,	-235,	34,	-149,	-235,	34,	-153,	-234,	34,	-154,	-230,	32,	-154,	-231,	37,	-156,	-230,	32,	-150,	-234,	34,	-155,	-234,	35,	-154,	-231,	33,	-157,	-230,	32,	-157,	-233,	32,	-158,	-233,	33,	-159,	-228,	33,	-161,	-229,	32,	-159,	-228,	32,	-163,	-224,	27,	-166,	-223,	29,	-166,	-223,	27,	-165,	-228,	26,	-164,	-223,	26,	-163,	-226,	28,	-163,	-222,	26,	-166,	-220,	28,	-165,	-222,	29,	-167,	-223,	31,	-168,	-222,	33,	-170,	-218,	33,	-172,	-219,	30,	-171,	-220,	28,	-173,	-219,	28,	-171,	-218,	23,	-172,	-220,	24,	-174,	-219,	21,	-178,	-221,	24,	-177,	-217,	26,	-175,	-218,	25,	-173,	-213,	26,	-173,	-217,	29,	-176,	-212,	28,	-176,	-209,	27,	-177,	-207,	25,	-176,	-210,	25,	-178,	-203,	26,	-177,	-200,	22,	-177,	-202,	24,	-180,	-203,	28,	-181,	-203,	32,	-182,	-206,	30,	-181,	-210,	24,	-181,	-213,	25,	-176,	-207,	25,	-177,	-207,	25,	-177,	-204,	22,	-177,	-200,	26,	-178,	-194,	22,	-177,	-199,	19,	-176,	-192,	19,	-178,	-189,	21,	-177,	-186,	18,	-182,	-183,	20,	-180,	-185,	20,	-181,	-184,	21,	-183,	-181,	19,	-178,	-183,	16,	-173,	-181,	23,	-176,	-184,	19,	-172,	-183,	18,	-166,	-181,	18,	-171,	-174,	18,	-175,	-172,	15,	-174,	-167,	12,	-173,	-166,	15,	-174,	-155,	15,	-173,	-151,	10,	-171,	-144,	7,	-175,	-139,	10,	-171,	-136,	9,	-167,	-132,	7,	-165,	-131,	6,	-167,	-126,	5,	-169,	-123,	7,	-167,	-117,	3,	-166,	-117,	6,	-164,	-105,	5,	-160,	-101,	10,	-157,	-91,	3,	-153,	-91,	1,	-155,	-82,	-2,	-161,	-66,	0,	-182,	-54,	-6,	-213,	-40,	-12,	-279,	-34,	-31,	-368,	-72,	-37,	-437,	-126,	-38,	-600,	-119,	3,	-729,	-156,	107,	-798,	-271,	171,	-751,	-312,	112,	-710,	-191,	36,	-669,	-104,	-3,	-595,	-134,	-19,	-496,	-224,	-18,	-357,	-283,	1,	-216,	-258,	17,	-87,	-190,	36,	5,	-110,	42,	72,	-40,	44,	106,	12,	44,	125,	58,	51,	122,	54,	52,	88,	17,	12,	23,	-8,	-25,	-78,	-10,	-45,	-166,	-31,	-46,	-230,	-37,	-58,	-305,	-47,	-60,	-366,	-50,	-57,	-398,	-51,	-52,	-403,	-55,	-41,	-391,	-59,	-32,	-374,	-62,	-35,	-360,	-60,	-32,	-351,	-57,	-29,	-338,	-44,	-20,	-325,	-31,	-11,	-308,	-25,	-1,	-290,	-24,	6,	-269,	-27,	8,	-251,	-27,	10,	-239,	-28,	3,	-223,	-26,	5,	-211,	-28,	8,	-194,	-41,	5,	-209,	-50,	-2,	-197,	-55,	-11,	-204,	-51,	-11,	-209,	-47,	-14,	-214,	-45,	-17,	-223,	-47,	-24,	-229,	-51,	-29,	-238,	-46,	-32,	-249,	-53,	-31,	-252,	-51,	-31,	-259,	-53,	-26,	-261,	-50,	-22,	-263,	-49,	-18,	-263,	-45,	-12,	-262,	-50,	-11,	-260,	-48,	-4,	-258,	-50,	-1,	-254,	-44,	-2,	-255,	-41,	-1,	-254,	-38,	-8,	-251,	-35,	-7,	-254,	-28,	-9,	-256,	-22,	-12,	-258,	-18,	-12,	-257,	-22,	-12,	-254,	-23,	-9,	-255,	-24,	-10,	-253,	-20,	-12,	-253,	-18,	-12,	-250,	-14,	-12,	-246,	-14,	-11,	-245,	-13,	-12,	-239,	-13,	-12,	-236,	-10,	-12,	-236,	-9,	-16,	-236,	-5,	-13,	-240,	3,	-13,	-242,	8,	-17,	-243,	6,	-11,	-249,	1,	-10,	-251,	2,	-9,	-248,	3,	-9,	-253,	-7,	-6,	-253,	-6,	-4,	-254,	-9,	-6,	-254,	-10,	-8,	-257,	-4,	-7,	-255,	-7,	-8,	-257,	-7,	-10,	-257,	-8,	-10,	-257,	-7,	-14,	-252,	-7,	-9,	-253,	-4,	-12,	-252,	-8,	-12,	-252,	-7,	-12,	-251,	-7,	-15,	-249,	-8,	-12,	-253,	-12,	-15,	-249,	-12,	-12,	-254,	-10,	-12,	-253,	-15,	-14,	-252,	-10,	-10,	-256,	-16,	-7,	-257,	-11,	-8,	-253,	-13,	-6,	-256,	-12	-5,	-256,	-13,	-6,	-259,	-11,	-4,	-259,	-8,	-6,	-257,	-8,	-9,	-256,	-8,	-9,	-258,	-9,	-11,	-256,	-8,	-12,	-255,	-7,	-15,	-254,	-6,	-15,	-255,	-12,	-17,	-252,	-11,	-18,	-250,	-10,	-19,	-250,	-14,	-20,	-249,	-13,	-18,	-251,	-12,	-13,	-253,	-15,	-15,	-251,	-14,	-17,	-253,	-9,	-12,	-254,	-11,	-20,	-250,	-10,	-13,	-255,	-11,	-14,	-253,	-11,	-12,	-255,	-6,	-12,	-251,	-7,	-12,	-254,	-3,	-9,	-253,	-3,	-11,	-252,	0,	-10,	-256,	0,	-7,	-253,	1,	-9,	-253,	-2,	-8,	-248,	4,	2,	-242,	-5,	-4,	-252,	-3,	-6,	-252,	-1,	-2,	-251,	-7,	0,	-254,	-3,	0,	-250,	-7,	-3,	-252,	-10,	-2,	-249,	-10,	-3,	-248,	-9,	-4,	-246,	-9,	-6,	-251,	-7,	-7,	-250,	-4,	-7,	-252,	-3,	-8,	-254,	-5,	-11,	-255,	-4,	-11,	-253,	-2,	-10,	-254,	0,	-12,	-254,	6,	-12,	-252,	-3,	-13,	-253,	-3,	-9,	-252,	-11,	-12,	-254,	-5,	-12,	-250,	-7,	-12,	-252,	-10,	-12,	-249,	-7,	-11,	-250,	-3,	-12,	-252,	-6,	-10,	-255,	-5,	-9,	-252,	-5,	-12,	-254,	0,	-6,	-257,	-1,	-6,	-255,	-7, -8	,-254,	-10,	-6,	-256,	-13,	-6,	-253,	-16,	-5,	-255,	-15,	-10,	-250,	-14,	-10,	-252,	-18,	-10,	-251,	-13,	-12,	-250,	-14,	-12,	-252,	-9,	-12,	-251,	-13,	-12	, -253,	-14,	-13,	-254,	-12,	-16,	-255,	-10,	-18,	-256,	-7,	-15,	-260,	-12,	-20,	-260,	-3,	-21,	-261,	-7,	-21,	-261,	-3,	-19,	-260,	-4,	-19,	-259,	-7,	-19,	-256,	-9,	-20,	-257,	-7,	-20,	-258,	-11,	-22,	-255,	-14,	-22,	-256,	-14,	-22,	-254,	-14,	-26,	-253,	-14,	-26,	-254,	-16,	-26,	-253,	-14,	-23,	-253,	-16,	-18,	-254,	-14,	-22,	-252,	-13,	-18,	-255,	-12,	-14,	-258,	-15,	-12,	-258,	-19 };
        for (int i=0; i<401;i++){
            //an error here to fix related to java.nio.BufferOverflowException
            byteBuffer.putFloat(values[i]);
//            byteBuffer.putFloat(values[401+i]);
//            byteBuffer.putFloat(values[1202-i]);
        }

        inputFeature0.loadBuffer(byteBuffer);

        // Runs model inference and gets result.
        FallDetectionModel.Outputs outputs = model.process(inputFeature0);

        TensorBuffer outputFeature0 = outputs.getOutputFeature0AsTensorBuffer();
        float[] output = outputFeature0.getFloatArray();

        Log.d(TAG,"output: "+ Arrays.toString(output));

        tv.setText("String.valueOf ( output[0])");

        // Releases model resources if no longer used.
        model.close();
    } catch (IOException e) {
        // TODO Handle the exception

    }
}

}